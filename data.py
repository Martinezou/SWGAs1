# -*- coding: utf-8 -*-
import xlrd


# 从excel中提取数据
def excel_to_list(a):
    """从excel中提取加工时间和加工成本"""
    data = xlrd.open_workbook(a)
    table = data.sheets()[0]
    nrows = table.nrows
    list1 = []
    for i in range(nrows):
        list1.append(table.row_values(i))
    list2 = [[]for i in range(nrows)]
    for i in xrange(len(list1)):
        for j in xrange(len(list1[i])):
            list2[i].append(list1[i][j])
    for i in range(nrows):
        while '' in list2[i]:
            list2[i].remove('')
    return list2
process_time = excel_to_list('time.xlsx')
process_cost = excel_to_list('cost.xlsx')


def choose_machine(a):
    """提取可选加工机器"""
    data = xlrd.open_workbook(a)
    table = data.sheets()[0]
    nrows = table.nrows
    list1 = []
    for i in range(nrows):
        list1.append(table.row_values(i))
    list2 = [[]for i in range(nrows)]
    for i in xrange(len(list1)):
        for j in xrange(len(list1[i])):
            list2[i].append(list1[i][j])
    list3 = [[]for i in range(nrows)]
    for i in range(nrows):
        for j in xrange(len(list2[i])):
            if list2[i][j] != '':
                list3[i].append(j)
    return list3

machine_list = choose_machine('time.xlsx')  # 每个工序对应的机器
#print "每个工序对应的机器：%s" % machine_list


# 每个零部件的各个工序可选机器
def choose_workpiece_machine(a):
    """a--> machine_list"""
    list1 = [3, 4, 5, 4, 3, 4, 3, 4, 5, 4, 3, 5, 3, 4, 5, 4, 3, 4, 3, 4,
             3, 4, 5, 4, 3, 4, 3, 4, 5, 4, 3, 5, 3, 4, 5, 4, 3, 4, 3, 4,
             3, 4, 5, 4, 3, 4, 3, 4, 5, 4]  # 每个零部件包含的工序
    list2 =[[] for i in range(len(list1))]
    m = 0
    for i in xrange(len(list2)):
        b = list1[i]
        for l in xrange(m, b+m):
            list2[i].append(a[l])
        m += b
    return list2
workpiece_machine = choose_workpiece_machine(machine_list)  # 每个零部件的各个工序可选机器
workpiece_time = choose_workpiece_machine(process_time)     # 每个零部件的各个工序加工时间
workpiece_cost = choose_workpiece_machine(process_cost)     # 每个零部件的各个工序加工费用
workpiece_process = [3, 4, 5, 4, 3, 4, 3, 4, 5, 4, 3, 5, 3, 4, 5, 4, 3, 4, 3, 4,
                     3, 4, 5, 4, 3, 4, 3, 4, 5, 4, 3, 5, 3, 4, 5, 4, 3, 4, 3, 4,
                     3, 4, 5, 4, 3, 4, 3, 4, 5, 4]  # 每个工件的工序数量
machine_unit = [4, 3, 3, 4, 3, 3, 4, 3, 3, 4, 3, 3, 4, 3, 3, 4, 3, 3, 4, 3]  # 机器所属加工单元
#print "每个零部件可选机器：%s" % workpiece_machine
#print "每个工序加工时间：%s" % workpiece_time
#print "每个工序加工费用：%s" % workpiece_cost


# 零部件每道工序对应的机器加工时间
def machine_to_time(a, b):
    """a-->workpiece_machine
      b-->workpiece_time"""
    dict1 = [[]for i in xrange(len(a))]
    for i in xrange(len(a)):
        for j in xrange(len(a[i])):
            dict1[i].append((dict(zip(a[i][j], b[i][j]))))
    return dict1
machine_time = machine_to_time(workpiece_machine, workpiece_time)
#print machine_time


# 零部件在每个机器上的加工时间
def make_workpiece_machine_time(a, b):
    """a-->workpiece_machine
       b-->workpiece_time"""
    dict1 = {}
    for i in xrange(len(a)):
        for j in xrange(len(a[i])):
            for l in xrange(len(a[i][j])):
                dict1[(i, a[i][j][l])] = b[i][j][l]
    return dict1
workpiece_machine_time = make_workpiece_machine_time(workpiece_machine, workpiece_time)
#print "每个零部件在机器上的加工时间：%s" % workpiece_machine_time


# 零部件在每个机器上的加工费用
def make_workpiece_machine_cost(a, b):
    """a-->workpiece_machine
       b-->workpiece_cost"""
    dict1 = {}
    for i in xrange(len(a)):
        for j in xrange(len(a[i])):
            for l in xrange(len(a[i][j])):
                dict1[(i, a[i][j][l])] = b[i][j][l]
    return dict1
workpiece_machine_cost = make_workpiece_machine_cost(workpiece_machine, workpiece_cost)
#print "每个零部件在机器上的加工费用：%s" % workpiece_machine_cost


# 任意两个单元之间的距离
unit_distance = {(7, 3): 80, (16, 9): 275, (19, 4): 312, (18, 19): 427, (8, 5): 466, (9, 0): 329, (10, 7): 389,
                 (0, 17): 150, (14, 1): 311, (12, 17): 145, (15, 4): 61, (3, 2): 325, (4, 5): 187, (16, 0): 77,
                 (19, 13): 450, (17, 13): 347, (18, 10): 429, (8, 12): 375, (10, 14): 122, (8, 18): 441,
                 (11, 15): 386, (9, 19): 199, (14, 8): 333, (12, 8): 375, (15, 13): 481, (2, 18): 53, (0, 14): 69,
                 (3, 11): 154, (1, 15): 439, (4, 12): 97, (2, 12): 76, (5, 1): 449, (3, 17): 352, (16, 7): 372,
                 (6, 14): 463, (19, 18): 427, (17, 6): 197, (7, 15): 393, (18, 5): 240, (10, 9): 330, (11, 4): 392,
                 (14, 19): 78, (12, 7): 282, (10, 19): 334, (15, 10): 320, (13, 6): 491, (0, 5): 222, (1, 0): 377,
                 (4, 11): 392, (2, 7): 335, (5, 10): 289, (6, 1): 449, (4, 17): 492, (7, 4): 494, (19, 1): 245,
                 (8, 0): 101, (15, 19): 415, (11, 19): 100, (16, 11): 105, (6, 18): 492, (19, 6): 130, (17, 10): 416,
                 (18, 17): 337, (8, 7): 254, (9, 6): 409, (10, 5): 289, (11, 8): 235, (0, 19): 305, (14, 7): 283,
                 (12, 19): 259, (1, 18): 328, (15, 6): 272, (13, 18): 183, (0, 9): 329, (3, 4): 349, (4, 7): 494,
                 (5, 6): 165, (16, 2): 468, (19, 15): 415, (17, 3): 352, (7, 16): 372, (18, 8): 441, (8, 14): 333,
                 (9, 15): 336, (10, 12): 367, (11, 1): 478, (9, 17): 492, (12, 10): 367, (13, 11): 328, (2, 16): 468,
                 (3, 13): 398, (1, 13): 471, (4, 14): 251, (2, 10): 164, (5, 15): 50, (3, 19): 107, (6, 12): 453,
                 (17, 4): 492, (7, 9): 56, (18, 3): 305, (11, 6): 383, (14, 17): 262, (12, 1): 496, (10, 17): 416,
                 (13, 4): 204, (0, 7): 315, (1, 6): 449, (2, 5): 52, (5, 8): 466, (6, 7): 434, (4, 19): 312,
                 (7, 6): 434, (5, 18): 240, (19, 3): 107, (8, 2): 120, (9, 3): 169, (14, 2): 492, (3, 1): 344,
                 (16, 13): 397, (6, 16): 221, (19, 8): 311, (17, 8): 426, (18, 15): 357, (8, 9): 145, (9, 4): 293,
                 (10, 3): 150, (11, 10): 331, (14, 5): 436, (12, 13): 379, (1, 16): 292, (15, 0): 283, (13, 16): 397,
                 (0, 11): 177, (3, 6): 315, (1, 10): 120, (4, 1): 404, (5, 4): 187, (16, 4): 361, (6, 11): 383,
                 (19, 17): 456, (17, 1): 270, (7, 18): 384, (18, 6): 492, (9, 13): 104, (11, 3): 154, (14, 12): 121,
                 (12, 4): 97, (15, 9): 336, (13, 9): 104, (0, 2): 63, (3, 15): 435, (1, 3): 344, (4, 8): 471,
                 (2, 8): 120, (5, 13): 66, (6, 2): 318, (7, 11): 396, (18, 1): 328, (16, 17): 299, (12, 3): 459,
                 (13, 2): 360, (1, 4): 404, (2, 3): 325, (6, 5): 165, (7, 0): 315, (5, 16): 284, (16, 8): 55,
                 (19, 5): 174, (8, 4): 471, (9, 1): 423, (10, 6): 470, (0, 16): 77, (14, 0): 69, (12, 16): 169,
                 (15, 5): 50, (16, 15): 156, (19, 10): 334, (17, 14): 262, (18, 13): 183, (8, 11): 235, (9, 10): 330,
                 (10, 1): 120, (8, 17): 426, (11, 12): 120, (14, 11): 457, (12, 15): 422, (15, 2): 310, (13, 14): 109,
                 (0, 13): 236, (3, 8): 431, (1, 8): 345, (4, 3): 349, (2, 15): 310, (5, 2): 52, (16, 6): 221,
                 (6, 9): 409, (17, 7): 150, (7, 12): 282, (18, 4): 174, (10, 8): 356, (11, 5): 247, (14, 18): 440,
                 (12, 6): 453, (10, 18): 429, (15, 11): 386, (13, 7): 85, (0, 4): 243, (4, 10): 65, (2, 6): 318,
                 (5, 11): 247, (6, 0): 170, (4, 16): 361, (7, 5): 128, (16, 19): 98, (17, 18): 337, (15, 16): 156,
                 (13, 0): 236, (11, 16): 105, (2, 1): 431, (7, 2): 335, (16, 10): 294, (19, 7): 135, (17, 11): 305,
                 (18, 16): 167, (8, 6): 339, (9, 7): 56, (10, 4): 65, (11, 9): 353, (0, 18): 367, (14, 6): 463,
                 (12, 18): 223, (1, 19): 245, (15, 7): 393, (13, 19): 450, (0, 8): 101, (3, 5): 167, (4, 6): 215,
                 (5, 7): 128, (16, 1): 292, (19, 12): 259, (17, 12): 145, (7, 17): 150, (18, 11): 427, (8, 13): 339,
                 (9, 8): 145, (10, 15): 320, (8, 19): 311, (11, 14): 457, (9, 18): 272, (14, 9): 396, (12, 9): 269,
                 (15, 12): 422, (13, 12): 379, (2, 19): 215, (0, 15): 283, (3, 10): 150, (1, 14): 311, (4, 13): 204,
                 (2, 13): 360, (5, 0): 222, (3, 16): 80, (6, 15): 272, (17, 5): 325, (7, 14): 283, (18, 2): 53,
                 (11, 7): 396, (14, 16): 430, (12, 0): 496, (10, 16): 294, (13, 5): 66, (0, 6): 170, (1, 7): 486,
                 (2, 4): 90, (5, 9): 144, (4, 18): 174, (5, 19): 174, (19, 0): 305, (17, 16): 299, (8, 1): 345,
                 (15, 18): 357, (11, 18): 427, (16, 12): 169, (6, 19): 130, (19, 9): 199, (17, 9): 492, (18, 14): 440,
                 (9, 5): 144, (10, 2): 164, (14, 4): 251, (1, 17): 270, (15, 1): 439, (13, 17): 347, (0, 10): 482,
                 (3, 7): 80, (1, 11): 478, (4, 0): 243, (16, 3): 80, (6, 10): 470, (19, 14): 78, (17, 2): 412,
                 (7, 19): 135, (18, 9): 272, (8, 15): 455, (9, 14): 396, (10, 13): 348, (11, 0): 177, (9, 16): 275,
                 (14, 15): 396, (12, 11): 120, (15, 14): 396, (13, 10): 348, (2, 17): 412, (0, 1): 377, (3, 12): 459,
                 (1, 12): 496, (4, 15): 61, (2, 11): 258, (5, 14): 436, (3, 18): 305, (6, 13): 491, (7, 8): 254,
                 (18, 0): 367, (12, 2): 76, (13, 3): 398, (1, 5): 449, (6, 4): 215, (7, 1): 486, (5, 17): 325,
                 (19, 2): 215, (8, 3): 431, (9, 2): 470, (14, 3): 226, (3, 0): 473, (16, 14): 430, (6, 17): 197,
                 (19, 11): 100, (17, 15): 460, (18, 12): 223, (8, 10): 356, (9, 11): 353, (10, 0): 482, (8, 16): 55,
                 (11, 13): 328, (14, 10): 122, (12, 14): 121, (15, 3): 435, (13, 15): 481, (0, 12): 496, (3, 9): 169,
                 (1, 9): 423, (4, 2): 90, (2, 14): 492, (5, 3): 167, (16, 5): 284, (6, 8): 339, (19, 16): 98, (17, 0): 150,
                 (7, 13): 85, (18, 7): 384, (9, 12): 269, (10, 11): 331, (11, 2): 258, (14, 13): 109, (12, 5): 464,
                 (15, 8): 455, (13, 8): 339, (0, 3): 473, (3, 14): 226, (1, 2): 431, (4, 9): 293, (2, 9): 470,
                 (5, 12): 464, (6, 3): 315, (7, 10): 389, (16, 18): 167, (17, 19): 456, (15, 17): 460, (13, 1): 471,
                 (11, 17): 305, (2, 0): 63}

unit_machine = [[0, 1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12, 13], [14, 15, 16], [17, 18, 19],
                [20, 21, 22, 23], [24, 25, 26], [27, 28, 29], [30, 31, 32, 33], [34, 35, 36], [37, 38, 39],
                [40, 41, 42, 43], [44, 45, 46], [47, 48, 49], [50, 51, 52, 53], [54, 55, 56], [57, 58, 59],
                [60, 61, 62, 63], [64, 65, 66]]


unit_machine_list = reduce(lambda x, y: x+y, [[i] * len(unit_machine[i]) for i in xrange(len(unit_machine))])


def machine_distance(a, b):
    return unit_distance.get((unit_machine_list[a], unit_machine_list[b]), 0)


# 求出任意两个机器之间的距离


#def machine_distance(a, b):
#    """a-->机器a
#       b-->机器b
#       c-->unit_distance
#       d-->unit_machine"""
#    list1 = []
#    for i in range(len(unit_machine)):
#        if a in unit_machine[i]:
#            list1.append(i)
#    for i in range(len(unit_machine)):
#        if b in unit_machine[i]:
#            list1.append(i)
#    try:
#        distance = unit_distance[(list1[0], list1[1])]
#    except KeyError:
#        distance = 0
#    return distance
#print machine_distance(55, 66)

















