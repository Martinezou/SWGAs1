# -*- coding: utf-8 -*-
from networkx import*
import networkx as nx
import matplotlib.pyplot as plt
from matplotlib.font_manager import FontProperties
import scipy.stats as stats
from sklearn import linear_model
import numpy as np

list1 = [[31, 10, 39, 17, 21, 28, 4, 14, 14, 30, 43, 20, 11, 48, 5, 19, 31, 26, 15, 32, 37, 34, 40, 33, 1, 29, 15,
          32, 2, 31, 11, 27, 35, 49, 31, 48, 39, 0, 22, 1, 37, 34, 40, 8, 48, 33, 31, 34, 36, 19, 35, 1, 13, 9, 41,
          13, 2, 49, 13, 7, 25, 24, 22, 32, 17, 16, 41, 42, 41, 24, 37, 45, 34, 35, 11, 28, 15, 11, 10, 7, 46, 42,
          12, 2, 26, 12, 28, 17, 28, 18, 23, 27, 48, 22, 35, 9, 8, 42, 38, 8, 18, 23, 29, 0, 45, 46, 39, 13, 45, 49,
          16, 2, 22, 43, 49, 19, 20, 21, 45, 27, 46, 6, 2, 41, 47, 30, 44, 4, 40, 3, 28, 29, 25, 23, 20, 5, 47, 10,
          3, 7, 21, 6, 14, 9, 30, 33, 3, 12, 47, 8, 26, 15, 14, 4, 9, 42, 1, 36, 0, 5, 47, 42, 44, 44, 29, 6, 43, 27,
          37, 24, 21, 7, 38, 8, 36, 38, 16, 25, 5, 25, 23, 11, 14, 43, 17, 39, 22, 48, 33, 34, 18, 19, 3], [8, 3, 31,
        44, 2, 18, 35, 19, 40, 38, 10, 19, 25, 5, 25, 26, 3, 27, 28, 18, 15, 8, 21, 7, 43, 28, 1, 0, 31, 6, 35, 3, 47,
        0, 49, 49, 33, 16, 1, 34, 39, 48, 40, 13, 34, 5, 9, 42, 43, 9, 42, 0, 49, 14, 13, 13, 6, 31, 42, 36, 28, 45,
        17, 6, 23, 28, 23, 16, 4, 41, 10, 27, 41, 15, 1, 43, 25, 20, 2, 35, 12, 21, 14, 42, 45, 8, 3, 17, 21, 11, 9,
        41, 33, 30, 38, 5, 34, 23, 36, 12, 31, 30, 11, 2, 22, 34, 26, 19, 17, 9, 34, 48, 35, 24, 21, 32, 46, 29, 40,
        32, 20, 19, 39, 29, 39, 47, 22, 44, 29, 15, 48, 44, 23, 18, 2, 47, 36, 37, 48, 48, 8, 2, 11, 49, 33, 7, 14, 14,
    22, 24, 13, 38, 25, 37, 47, 45, 33, 17, 1, 32, 10, 24, 16, 29, 22, 26, 45, 41, 8, 4, 37, 11, 14, 27, 11, 31, 37,
        43, 28, 30, 42, 5, 46, 7, 22, 27, 4, 12, 20, 7, 39, 46, 15], [45, 46, 7, 38, 33, 11, 0, 21, 18, 17, 30, 35,
        44, 45, 49, 29, 19, 15, 47, 39, 17, 28, 27, 46, 2, 34, 21, 11, 16, 37, 41, 36, 32, 18, 10, 44, 27, 11, 12,
        28, 26, 32, 48, 35, 14, 29, 23, 0, 34, 31, 42, 27, 28, 12, 9, 47, 13, 33, 10, 26, 43, 38, 31, 15, 18, 31,
        44, 25, 3, 37, 9, 42, 5, 41, 33, 4, 19, 43, 26, 20, 28, 35, 8, 39, 22, 9, 29, 3, 42, 0, 6, 46, 36, 13, 24, 40,
        15, 19, 25, 47, 2, 23, 25, 49, 29, 16, 22, 20, 31, 1, 22, 48, 15, 5, 22, 14, 33, 12, 40, 43, 48, 8, 8, 9, 39,
        23, 42, 23, 47, 11, 37, 2, 25, 24, 14, 49, 24, 2, 43, 19, 5, 37, 14, 36, 20, 48, 4, 21, 31, 2, 17, 34, 30,
        32, 13, 4, 11, 3, 13, 10, 45, 1, 27, 35, 42, 22, 5, 48, 28, 41, 38, 8, 7, 41, 3, 6, 1, 17, 39, 8, 34, 40,
        16, 14, 7, 34, 49, 6, 1, 21, 7, 45, 30]]
list2 = [[16, 13, 42, 11, 15, 55, 11, 47, 42, 24, 20, 49, 24, 17, 60, 36, 45, 41, 37, 36, 4, 26, 17, 6, 47, 14, 34, 63, 30, 63, 11, 18, 47, 10, 46, 35, 55, 5, 37, 57, 3, 10, 1, 61, 18, 48, 54, 28, 22, 45, 34, 31, 0, 61, 24, 54, 20, 62, 55, 41, 4, 11, 28, 6, 25, 22, 18, 48, 61, 42, 39, 4, 65, 49, 36, 10, 49, 46, 35, 20, 18, 40, 5, 5, 11, 47, 62, 55, 59, 34, 7, 52, 14, 10, 62, 46, 41, 10, 16, 51, 57, 41, 59, 14, 11, 28, 57, 34, 12, 58, 5, 25, 25, 21, 41, 43, 1, 18, 49, 31, 13, 37, 46, 19, 33, 26, 41, 42, 3, 7, 15, 58, 11, 27, 32, 30, 26, 31, 21, 13, 11, 25, 64, 53, 9, 33, 52, 64, 6, 63, 33, 36, 14, 13, 49, 25, 19, 45, 3, 18, 46, 17, 5, 43, 64, 43, 57, 22, 22, 39, 19, 32, 26, 27, 48, 24, 24, 31, 23, 23, 9, 54, 51, 9, 22, 6, 46, 53, 51, 3, 63, 51, 9], [17, 20, 62, 1, 37, 55, 47, 28, 10, 55, 18, 45, 27, 51, 58, 31, 66, 64, 7, 50, 14, 30, 24, 41, 20, 30, 15, 17, 11, 41, 53, 11, 10, 28, 35, 62, 26, 61, 8, 18, 42, 32, 7, 6, 27, 15, 56, 4, 2, 24, 28, 32, 39, 32, 32, 20, 20, 12, 10, 17, 62, 60, 19, 13, 51, 52, 21, 11, 1, 24, 35, 5, 57, 60, 11, 11, 41, 64, 8, 32, 58, 8, 63, 11, 30, 18, 13, 6, 11, 2, 47, 31, 1, 18, 62, 31, 24, 3, 56, 20, 64, 21, 3, 10, 30, 43, 28, 20, 55, 55, 66, 41, 3, 32, 6, 27, 41, 10, 32, 29, 14, 16, 19, 62, 39, 44, 20, 20, 58, 25, 62, 9, 39, 12, 25, 31, 13, 19, 20, 53, 63, 64, 48, 55, 2, 26, 8, 57, 22, 42, 51, 63, 43, 43, 46, 18, 3, 22, 19, 6, 9, 13, 54, 64, 11, 26, 32, 54, 53, 42, 55, 31, 15, 31, 54, 54, 60, 9, 3, 22, 23, 13, 25, 31, 64, 17, 39, 12, 11, 46, 25, 26, 18], [60, 24, 50, 9, 22, 24, 10, 24, 0, 19, 18, 37, 1, 58, 23, 14, 18, 14, 18, 36, 49, 7, 18, 38, 30, 26, 39, 3, 8, 4, 47, 17, 52, 4, 53, 33, 65, 36, 46, 41, 18, 37, 17, 34, 0, 11, 7, 1, 42, 10, 21, 13, 2, 59, 35, 15, 26, 1, 17, 20, 55, 50, 21, 1, 58, 4, 9, 27, 65, 58, 30, 28, 51, 66, 2, 1, 38, 2, 43, 0, 14, 55, 55, 38, 30, 39, 58, 66, 35, 11, 18, 13, 52, 19, 1, 10, 2, 20, 11, 13, 20, 62, 12, 11, 34, 5, 44, 7, 41, 30, 10, 24, 13, 30, 11, 37, 34, 6, 14, 52, 57, 30, 2, 13, 50, 57, 25, 39, 32, 64, 21, 35, 43, 42, 55, 12, 21, 25, 9, 21, 54, 14, 65, 33, 32, 26, 18, 31, 54, 46, 5, 8, 14, 12, 2, 9, 54, 52, 3, 2, 12, 8, 53, 62, 38, 17, 43, 3, 15, 61, 63, 63, 52, 64, 13, 15, 61, 14, 6, 15, 65, 11, 6, 15, 39, 51, 64, 13, 64, 19, 22, 13, 22]]
list3 = [[] for i in range(50)]
G = nx.Graph()
for i in range(len(list1[2])):
    for j in range(50):
        if list1[2][i] == j:
            list3[j].append(list2[2][i])
#print list3
for i in range(len(list3)):
    for j in range(len(list3[i])):
        if j+1 < len(list3[i]):
            G.add_edge(list3[i][j], list3[i][j+1])

nx.draw(G, pos=nx.shell_layout(G), with_labels=True,node_size=30)
plt.show()
degree = nx.degree_histogram(G)          #返回图中所有节点的度分布序列
x = range(len(degree))                             #生成x轴序列，从1到最大度
y = [z / float(sum(degree)) for z in degree]
#将频次转换为频率，这用到Python的一个小技巧：列表内涵，Python的确很方便：）
plt.loglog(x,y,'ro')           #在双对数坐标轴上绘制度分布曲线

X_parameter = []
Y_parameter = []
for single_square_feet, single_price_value in zip(x, y):
    X_parameter.append([float(single_square_feet)])
    Y_parameter.append(float(single_price_value))

# 模型拟合
regr = linear_model.LinearRegression()
regr.fit(X_parameter, Y_parameter)
# 模型结果与得分
print('Coefficients: \n', regr.coef_,)
print("Intercept:\n", regr.intercept_)
# The mean square error
print("Residual sum of squares: %.8f"
      % np.mean((regr.predict(X_parameter) - Y_parameter) ** 2))  # 残差平方和

# 可视化

plt.scatter(X_parameter, Y_parameter, color='black')
plt.plot(X_parameter, regr.predict(X_parameter), color='blue', linewidth=3)

font = FontProperties(fname=r"c:\windows\fonts\simsun.ttc", size=14)
plt.xlabel(u'节点度', fontproperties=font)
plt.ylabel(u'频数', fontproperties=font)
plt.loglog(x, y, 'ro')           #在双对数坐标轴上绘制度分布曲线
plt.show()

pathlengths =[]
for v in G.nodes():
     spl=single_source_shortest_path_length(G,v)
     #print('%s %s' % (v,spl))
     for p in spl.values():
        pathlengths.append(p)
print "平均路径长度：%s" % (sum(pathlengths)/len(pathlengths))
#print "平均最短路径长度：%s" % nx.average_shortest_path_length(G)
print "平均聚类系数：%s" % nx.average_clustering(G)


ER = nx.random_graphs.erdos_renyi_graph(67, 0.2)  #生成包含20个节点、以概率0.2连接的随机图
pos = nx.shell_layout(ER)          #定义一个布局，此处采用了shell布局方式
nx.draw(ER,pos,with_labels=False,node_size = 30)

print "平均最短路径长度：%s" % nx.average_shortest_path_length(ER)
print "平均聚类系数：%s" % nx.average_clustering(ER)
#print "聚类系数：%s" % nx.clustering(ER)

WS = nx.random_graphs.watts_strogatz_graph(67,4,0.005)  #生成包含20个节点、每个节点4个近邻、随机化重连概率为0.3的小世界网络
pos = nx.circular_layout(WS)          #定义一个布局，此处采用了circular布局方式
nx.draw(WS,pos,with_labels=False,node_size = 30)  #绘制图形
print nx.average_shortest_path_length(WS)
print nx.average_clustering(WS)
plt.show()